Viewing a diff between two versions of a file highlighted
all the changes so I could narrow down the problem space
from thousands of lines of code to just a few possible lines
containing potential problems.

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?

Have easy access to the history of a file
can enable you to try different implementations in parallel,
or re-use code from previous implementations.
It can also help you troubleshoot by enabling you to easily
revert to an old version that worked, even after you've made changes.

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google docs does?

Pros of manually choosing when to commit are that you can distinguish small changes from big changes and decide when is the right time to commit.
The cons of manually choosing when to commit are that you mayforget or underestimatethe size of a major change.

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?

Implementing commits across multiple files is a more complicated process to implement, while it's much easier to implement tracking changes across just one file.

How can you use the commands git log and git diff to view the history of files?

git log shows you the commit ID of each commit, and you can use git diff to compare two versions.

How might using version control make you more confident to make changes that could break something?

I would be more confident knowing I could revert to a previous version.

Now that you have your workspace set up, what do you want to try using Git for?

For my pinyin poems project.

git clone to clone entire repo
git checkout <id> to checkout that version of the code (will detach from HEAD, so write down the ID of the latest version so you can get back to it)

